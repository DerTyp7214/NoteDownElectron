name: Build and Release

on:
  push:
    paths:
      - '**.rs'
      - '**.toml'
      - '**.yml'
    branches:
      - master
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [
          ubuntu-latest,
          macos-latest,
          windows-latest
        ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Cache node packages
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-modules-

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 9
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build Windows
        if: matrix.os == 'windows-latest'
        run: pnpm build:win

      - name: Build Linux
        if: matrix.os == 'macos-latest'
        run: pnpm build:mac

      - name: Build Windows
        if: matrix.os == 'ubuntu-latest'
        run: pnpm build:linux

      - name: Upload Windows binary
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-binary
          path: dist/*.exe

      - name: Upload Linux binary
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-binary
          path: dist/*.{AppImage,snap,deb}

      - name: Upload Mac binary
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-binary
          path: dist/*.dmg

  create_tag:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: package_version
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            const version = execSync('jq -r .version package.json').toString().trim();
            core.setOutput('version', version);

      - name: Create tag
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag v${{ steps.package_version.outputs.version }}
          git push origin v${{ steps.package_version.outputs.version }}

  release:
    runs-on: ubuntu-latest
    needs: [ build, create_tag ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: package_version
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            const version = execSync('jq -r .version package.json').toString().trim();
            core.setOutput('version', version);

      - name: Download Linux binary
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-binary
          path: dist/linux

      - name: Download macOS binary
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: macos-binary
          path: dist/macos

      - name: Download Windows binary
        uses: actions/download-artifact@v4
        with:
          name: windows-binary
          path: dist/windows

      - name: List files
        run: |
          ls -la dist
          ls -la dist/linux
          ls -la dist/macos
          ls -la dist/windows

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v${{ steps.package_version.outputs.version }}
          name: Release v${{ steps.package_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Linux binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/release/linux/rs-scp
          asset_name: rs-scp-linux
          asset_content_type: application/octet-stream

      - name: Upload macOS binary
        uses: actions/upload-release-asset@v1
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/release/macos/rs-scp
          asset_name: rs-scp-macos
          asset_content_type: application/octet-stream

      - name: Upload Windows binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/release/windows/rs-scp.exe
          asset_name: rs-scp-windows.exe
          asset_content_type: application/octet-stream
